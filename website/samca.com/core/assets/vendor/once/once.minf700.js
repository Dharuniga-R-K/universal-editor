/*! @drupal/once - v1.0.1 - 2021-06-12 */
const once = (function () {
  const n = /[\11\12\14\15\40]+/; const e = 'data-once'; const t = document; function r(n, t, r) { return n[`${t}Attribute`](e, r); } function o(e) { if (typeof e !== 'string') throw new TypeError('once ID must be a string'); if (e === '' || n.test(e)) throw new RangeError('once ID must not be empty or contain spaces'); return `[data-once~="${e}"]`; } function u(n) { if (!(n instanceof Element)) throw new TypeError('The element must be an instance of Element'); return !0; } function i(n, e) { void 0 === e && (e = t); let r = n; if (n === null)r = []; else { if (!n) throw new TypeError('Selector must not be empty'); typeof n !== 'string' || e !== t && !u(e) ? n instanceof Element && (r = [n]) : r = e.querySelectorAll(n); } return Array.prototype.slice.call(r); } function c(n, e, t) { return e.filter(((e) => { const r = u(e) && e.matches(n); return r && t && t(e), r; })); } function f(e, t) { const o = t.add; const u = t.remove; const i = []; r(e, 'has') && r(e, 'get').trim().split(n).forEach(((n) => { i.indexOf(n) < 0 && n !== u && i.push(n); })), o && i.push(o); const c = i.join(' '); r(e, c === '' ? 'remove' : 'set', c); } function a(n, e, t) { return c(`:not(${o(n)})`, i(e, t), ((e) => f(e, { add: n }))); } return a.remove = function (n, e, t) { return c(o(n), i(e, t), ((e) => f(e, { remove: n }))); }, a.filter = function (n, e, t) { return c(o(n), i(e, t)); }, a.find = function (n, e) { return i(n ? o(n) : '[data-once]', e); }, a;
}());
// # sourceMappingURL=once.min.js.map
