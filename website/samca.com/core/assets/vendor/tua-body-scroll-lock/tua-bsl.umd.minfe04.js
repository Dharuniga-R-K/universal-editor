/**
 * tua-body-scroll-lock v1.5.3
 * (c) 2024 Evinma, BuptStEve
 * @license MIT
 */
!(function (e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? t(exports) : typeof define === 'function' && define.amd ? define(['exports'], t) : t((e = typeof globalThis !== 'undefined' ? globalThis : e || self).bodyScrollLock = {}); }(this, ((e) => {
  const t = function () { return typeof window === 'undefined'; }; const n = function (e) { e = e || navigator.userAgent; const t = /(iPad).*OS\s([\d_]+)/.test(e); return { ios: !t && /(iPhone\sOS)\s([\d_]+)/.test(e) || t, android: /(Android);?[\s/]+([\d.]+)?/.test(e) }; }; function o(e) { if (t()) return !1; if (!e) throw new Error('options must be provided'); let n = !1; const o = { get passive() { n = !0; } }; const i = function () {}; const l = '__TUA_BSL_TEST_PASSIVE__'; window.addEventListener(l, i, o), window.removeEventListener(l, i, o); const c = e.capture; return n ? e : void 0 !== c && c; } function i() { return '__BSL_PREVENT_DEFAULT__' in window || (window.__BSL_PREVENT_DEFAULT__ = function (e) { e.cancelable && e.preventDefault(); }), window.__BSL_PREVENT_DEFAULT__; } function l(e) { return e ? Array.isArray(e) ? e : [e] : []; } const c = {
    lockedNum: 0, lockedElements: [], unLockCallback: null, documentListenerAdded: !1, initialClientPos: { clientX: 0, clientY: 0 },
  }; function r(e) { if (t()) return c; if (!(e == null ? void 0 : e.useGlobalLockState)) return r.lockState; const n = '__BSL_LOCK_STATE__' in window ? ({ ...c, ...window.__BSL_LOCK_STATE__ }) : c; return window.__BSL_LOCK_STATE__ = n, n; } function d(e) { return !n().ios && (typeof e.unLockCallback === 'function' && (e.unLockCallback(), !0)); } function s(e) { e.documentListenerAdded && (document.removeEventListener('touchmove', i(), o({ passive: !1 })), e.documentListenerAdded = !1); }r.lockState = c, e.clearBodyLocks = function (e) { if (!t()) { const n = r(e); if (n.lockedNum = 0, !d(n)) { if (n.lockedElements.length) for (let o = n.lockedElements.pop(); o;)o.ontouchmove = null, o.ontouchstart = null, o = n.lockedElements.pop(); s(n); } } }, e.getLockState = r, e.lock = function (e, c) { if (!t()) { let d; let s; let u; let a; const f = n(); const h = r(c); f.ios ? (l(e).filter(((e) => e && h.lockedElements.indexOf(e) === -1)).forEach(((e) => { e.ontouchstart = function (e) { const t = e.targetTouches[0]; const n = t.clientX; const o = t.clientY; h.initialClientPos = { clientX: n, clientY: o }; }, e.ontouchmove = function (t) { !(function (e, t, n) { if (t) { const o = t.scrollTop; const l = t.scrollLeft; const c = t.scrollWidth; const r = t.scrollHeight; const d = t.clientWidth; const s = t.clientHeight; const u = e.targetTouches[0].clientX - n.clientX; const a = e.targetTouches[0].clientY - n.clientY; const f = Math.abs(a) > Math.abs(u); if (f && (a > 0 && o === 0 || a < 0 && o + s + 1 >= r) || !f && (u > 0 && l === 0 || u < 0 && l + d + 1 >= c)) return i()(e); }e.stopPropagation(); }(t, e, h.initialClientPos)); }, h.lockedElements.push(e); })), (function (e) { if (!n().ios) return; if (e.documentListenerAdded) return; document.addEventListener('touchmove', i(), o({ passive: !1 })), e.documentListenerAdded = !0; }(h))) : h.lockedNum <= 0 && (h.unLockCallback = f.android ? (function (e) { const t = document.documentElement; const n = document.body; const o = t.scrollTop || n.scrollTop; const i = { ...t.style }; const l = { ...n.style }; return t.style.height = '100%', t.style.overflow = 'hidden', n.style.top = '-'.concat(o, 'px'), n.style.width = '100%', n.style.height = 'auto', n.style.position = 'fixed', n.style.overflow = (e == null ? void 0 : e.overflowType) || 'hidden', function () { t.style.height = i.height || '', t.style.overflow = i.overflow || '', ['top', 'width', 'height', 'overflow', 'position'].forEach(((e) => { n.style[e] = l[e] || ''; })), 'scrollBehavior' in document.documentElement.style ? window.scrollTo({ top: o, behavior: 'instant' }) : window.scrollTo(0, o); }; }(c)) : (d = document.documentElement, s = { ...d.style }, u = window.innerWidth - d.clientWidth, a = parseInt(window.getComputedStyle(d).paddingRight, 10), d.style.overflow = 'hidden', d.style.boxSizing = 'border-box', d.style.paddingRight = ''.concat(u + a, 'px'), function () { ['overflow', 'boxSizing', 'paddingRight'].forEach(((e) => { d.style[e] = s[e] || ''; })); })), h.lockedNum += 1; } }, e.unlock = function (e, n) { if (!t()) { const o = r(n); o.lockedNum -= 1, o.lockedNum > 0 || d(o) || (l(e).forEach(((e) => { const t = o.lockedElements.indexOf(e); e && t !== -1 && (e.ontouchmove = null, e.ontouchstart = null, o.lockedElements.splice(t, 1)); })), s(o)); } };
})));
